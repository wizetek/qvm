#!/usr/bin/env bash

## qvm - Quick/QEMU VM launcher
## 2022/11/25-2023/02/27
## Tom Wizetek <tom@wizetek.com>

##
## Function to create config file
##
createConfigFile() {
  cat 2>/dev/null 1>${CFG} << CONFIG
############################################################
## ${CMD} configuration
##
## Tips:
##
## NET= <boolean> | bridge0 | br0 | virbr0
##   (empty means enabled)
## MAC= <empty> | 52:54:01:23:45:67
##   (empty means random)
## ICH9= <boolean>
##   (host chipset Q35/ICH9 or i440FX/PIIX3)
##
## OPT=
## -hdb /path/to/seconddisk.img
## -hdd fourthdisk.img
##   (-hdc conflicts with -cdrom)
## -drive format=raw,media=cdrom,readonly,file=cd.iso
## -nic model=virtio-net-pci
## -usb -device usb-tablet
## -display gtk,gl=on,window-close=off
## -device VGA,edid=on,xres=1366,yres=768
## -daemonize
## ...and other qemu options
############################################################
#
#NAME="Linux distro"
#ISO="linux.iso"
#IMG="disk.qcow2"
#RAW="yes"
CPU="2"
MEM="4G"
#ICH9="yes"
#AUDIO="yes"
#NET="no"
#MAC="52:54:01:23:45:67"
#VNC=":2"
#TELNET="2302"
#OPT="-display gtk"
CONFIG
}

##
## Function to create disk image interactively
##
createDiskImage() {
  read -p "Disk image size (50G) : " IMGSIZE
  [[ ! ${IMGSIZE} ]] && IMGSIZE=50G

  read -p "File format (qcow2)/raw/vdi/vhdx/vmdk : " IMGFORMAT
  [[ ! ${IMGFORMAT} ]] && IMGFORMAT=qcow2

  read -p "Name (${IMG}) : " IMGNAME

  ## User chose disk image name different from what is set in config
  if [[ ${IMGNAME} ]]; then
    echo "IMG=${IMG} in configuration file. Edit to set IMG=${IMGNAME}"
    IMG=${IMGNAME}
  fi

  ## Confirmation before creating disk image
  echo -n "Create now, start over, or quit? (y)/n/q "
  while true; do
    read -sn1 INPUT
    case ${INPUT} in y|Y|"") echo; break ;; esac
    case ${INPUT} in n|N) return ;; esac
    case ${INPUT} in q|Q) echo; exit ;; esac
  done

  ## Create disk image or exit on failure
  qemu-img create -f ${IMGFORMAT} "${IMG}" ${IMGSIZE} || exit 1

  ## Set success flag
  IMGCREATED=1
}

##
## Variables for version, command, config dir/file, and user provided arguments
##
VER="1.0.2"
CMD="$(basename ${0})"
CFGDIR="${HOME}/.config/${CMD}" 
CFG="${1}"
shift
ARG="${@}"

##
## If no (valid) arguments are provided, show usage and exit
##
case ${CFG} in ""|-*) cat << USAGE
${CMD} ${VER}

usage:

  ${CMD} <configfile> [-qemuopt1 -qemuopt2 ...]

USAGE

  exit
  ;;
esac

##
## If slash is not detected in config file path, use predefined directory
##
if [[ ${CFG} != *"/"* ]]; then
  CFG="${CFGDIR}/${CFG}" 

  ## Create directory structure for config files if needed or exit on failure
  if [[ ! -d "${CFGDIR}" ]]; then
    mkdir -p "${CFGDIR}" || exit 1
  fi
fi

##
## Check if config file exists
##
if [[ -e ${CFG} ]]; then

  ## Exit if config file is not readable
  if [[ ! -r ${CFG} ]]; then
    echo "$(realpath ${CFG}): Unreadable configuration file"
    exit 1
  fi

  ## Exit if config file is not the correct type
  if [[ $(file -b ${CFG}) != "ASCII text" ]]; then
    echo "$(realpath ${CFG}): Invalid configuration file"
    exit 1
  fi

  ## Read config file
  source ${CFG}

## Prompt to create config file if not found
else
  echo "$(realpath ${CFG}): Configuration file not found"
  echo -n "Create it now from template? y/(n) "

  while true; do
    read -sn1 INPUT

    case ${INPUT} in y|Y)
      createConfigFile

      ## Check function's exit status and exit on write failure to config file
      if [[ $? != 0 ]]; then
        echo
        echo "$(realpath ${CFG}): Write operation failed"
        exit 1
      fi

      ## Show config file contents and path, then exit
      echo
      cat ${CFG}
      echo
      echo "Saved in: $(realpath ${CFG})"
      echo "Edit this file and set IMG= and/or ISO="
      exit
      ;;
    esac

    ## Exit if user chose not to create config file
    case ${INPUT} in n|N|"") echo; exit ;; esac

  done
fi

##
## Show path to config file on startup
##
echo "Configuration file: $(realpath ${CFG})"

##
## Check if disk image is defined
##
if [[ ! ${IMG} ]]; then
  echo "IMG= Disk image file not set"

## Check if disk image exists and prompt to create it if needed
elif [[ ! -e ${IMG} ]]; then
  echo "IMG=${IMG}: Inaccessible or not found"
  echo -n "Create empty disk image file, continue, or quit? (y)/n/q "

  while true; do
    read -sn1 INPUT

    ## Call function to create disk image until success flag is set
    case ${INPUT} in y|Y|"")
      until [[ ${IMGCREATED} ]]; do
        echo
        createDiskImage
      done
      ## Break out of the prompt loop after success
      break
      ;;
    esac

    ## Continue if user chose not to create disk image
    case ${INPUT} in n|N) IMG=""; echo; break ;; esac

    ## Exit if user chose to quit
    case ${INPUT} in q|Q) echo; exit ;; esac

  done
fi

##
## Check if RAW disk image format is set
##
if [[ ${IMG} ]]; then

  case ${RAW} in
    1|y|Y|[yY][eE][sS]|[oO][nN]|[tT][rR][uU][eE]) DISK="-drive format=raw,file=${IMG}" ;;
    *) DISK="-hda ${IMG}" ;;
  esac

fi

##
## Boot from ISO if defined and found
##
if [[ ${ISO} ]]; then

  if [[ -e ${ISO} ]]; then CDROM="-boot d -cdrom ${ISO}"
  else echo "ISO=${ISO}: Inaccessible or not found (ignored)"
  fi

fi

##
## Network (default: enabled)
##
case ${NET} in

  0|n|N|[nN][oO]|[oO][fF][fF]|[fF][aA][lL][sS][eE]) NIC="-nic none" ;;

  br[0-9]|bridge[0-9]|virbr[0-9])
    NIC="-nic bridge,br=${NET}"
    [[ ${MAC} ]] && NIC="${NIC},mac=${MAC}"
  ;;

  *)
    ## Generate random MAC address if not defined in config
    [[ ! ${MAC} ]] && MAC=$( printf 52:54:%02x:%02x:%02x:%02x $(( ${RANDOM} & 0xff )) $(( ${RANDOM} & 0xff )) $(( ${RANDOM} & 0xff)) $(( ${RANDOM} & 0xff )) )
    NIC="-nic mac=${MAC}"
  ;;

esac

##
## Audio (default: disabled)
##
case ${AUDIO} in 1|y|Y|[yY][eE][sS]|[oO][nN]|[tT][rR][uU][eE]) SOUND="-device intel-hda -device hda-duplex" ;; esac

##
## Chipset: i440FX+PIIX3 PCI/ISA (default) or Q35+ICH9 PCI-E/AHCI
##
case ${ICH9} in 1|y|Y|[yY][eE][sS]|[oO][nN]|[tT][rR][uU][eE]) CHIPSET="-machine q35" ;; esac

##
## Video output and console monitor
##
[[ ${VNC} ]] && VIDEO="-vnc ${VNC},to=99,lossy=on,power-control=on"
[[ ${TELNET} ]] && CONSOLE="-monitor telnet:127.0.0.1:${TELNET},server=on,wait=off"

##
## Check config for missing settings and set defaults if needed
##
[[ ! ${NAME} ]] && NAME="$(basename ${CFG})"
[[ ! ${CPU} ]] && CPU=1
[[ ! ${MEM} ]] && MEM=2G

##
## Show some relevant VM information on startup
##
echo
echo                   "VM name     [${NAME}]"
[[ ${CDROM} ]] && echo "boot from   [$(basename ${ISO})]"
[[ ${IMG} ]] && echo   "disk image  [$(basename ${IMG})]"
[[ ${SOUND} ]] && echo "audio       [enabled]"

## Only show MAC address if defined and if network is enabled
if [[ ${NIC} == "-nic none" ]]; then echo "network     [disabled]"
else
  [[ ${NIC} == "-nic bridge"* ]] && echo  "network     [bridge]"
  [[ ${MAC} ]] && echo                    "MAC address [${MAC}]"
fi

[[ ${TELNET} ]] && echo "TELNET      [:${TELNET}]"
[[ ${VNC} ]] && echo    "VNC         [${VNC}]"

##
## Finally launch QEMU
##
qemu-system-x86_64 \
-name "${NAME}" \
-accel kvm -cpu host \
-smp ${CPU} \
-m ${MEM} \
${CHIPSET} \
${VIDEO} \
${CONSOLE} \
${NIC} \
${SOUND} \
${DISK} \
${CDROM} \
${OPT} \
${ARG}

##
