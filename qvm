#!/usr/bin/env bash

## qvm - Quick/QEMU VM launcher
## 2022/11/25-2023/06/03
## Tom Wizetek <tom@wizetek.com>

##
## Function to create config file
##
createConfigFile() {
cat 2>/dev/null 1>${CFG} << CONFIG
############################################################
## ${CMD} configuration
##
## Tips:
##
## NET= <boolean> | bridge0 | br0 | virbr0
##   yes: enable
##   no: no networking
## MAC= <empty> | random | 52:54:01:23:45:67
##   blank/unset: QEMU default
##   random: generated on startup
## ICH9= <boolean>
##   yes: Q35/ICH9 host chipset
##   no: i440FX/PIIX3
## OPT=
##   -hdb /path/to/seconddisk.img
##   -hdd fourthdisk.img
##   (-hdc conflicts with -cdrom)
##   -drive format=raw,media=cdrom,readonly,file=cd.iso
##   -nic model=virtio-net-pci
##   -display gtk,gl=on,window-close=off
##   -device VGA,edid=on,xres=1366,yres=768
##   -device qxl-vga,ram_size_mb=256,vram_size_mb=256
##   -daemonize
##   ...and other qemu command options
############################################################
#
#DELAY="1"
#NAME="Linux distro"
#ISO="linux.iso"
#IMG="disk.qcow2"
#RAW="yes"
CPU="2"
MEM="4G"
#ICH9="yes"
#AUDIO="yes"
#NET="no"
#MAC="52:54:de:ad:be:ef"
#MAC="random"
#VNC=":2"
#TELNET="2302"
#SSH="2202"
#OPT="-usbdevice tablet"
#OPT="-vga qxl"
#OPT="-device virtio-vga-gl -display gtk,gl=on"
CONFIG

## Store exit code
CFGSTATUS=${?}
}

##
## Function to only read the expected variables from config file
##
setVarsFromConfig() {
## Eval to strip away quotes
DELAY=$(eval echo $(awk -F= '/^DELAY=/ {print $2}' ${CFG}))
NAME=$(eval echo $(awk -F= '/^NAME=/ {print $2}' ${CFG}))
ISO=$(eval echo $(awk -F= '/^ISO=/ {print $2}' ${CFG}))
IMG=$(eval echo $(awk -F= '/^IMG=/ {print $2}' ${CFG}))
RAW=$(eval echo $(awk -F= '/^RAW=/ {print $2}' ${CFG}))
CPU=$(eval echo $(awk -F= '/^CPU=/ {print $2}' ${CFG}))
MEM=$(eval echo $(awk -F= '/^MEM=/ {print $2}' ${CFG}))
ICH9=$(eval echo $(awk -F= '/^ICH9=/ {print $2}' ${CFG}))
AUDIO=$(eval echo $(awk -F= '/^AUDIO=/ {print $2}' ${CFG}))
NET=$(eval echo $(awk -F= '/^NET=/ {print $2}' ${CFG}))
MAC=$(eval echo $(awk -F= '/^MAC=/ {print $2}' ${CFG}))
VNC=$(eval echo $(awk -F= '/^VNC=/ {print $2}' ${CFG}))
TELNET=$(eval echo $(awk -F= '/^TELNET=/ {print $2}' ${CFG}))
SSH=$(eval echo $(awk -F= '/^SSH=/ {print $2}' ${CFG}))
OPT=$(eval echo $(awk -F= '/^OPT=/ {print $2}' ${CFG}))
}

##
## Function to create disk image interactively
##
createDiskImage() {
read -p "Disk image size? (50G) => " IMGSIZE
[[ ! ${IMGSIZE} ]] && IMGSIZE="50G"

read -p "File format? (qcow2) raw vdi vhdx vmdk => " IMGFORMAT
[[ ! ${IMGFORMAT} ]] && IMGFORMAT="qcow2"

read -p "Name? (${IMG}) => " IMGNAME

## User chose disk image name different from what is defined in config
if [[ ${IMGNAME} ]]; then
  echo "IMG=${IMG} in configuration file. Edit to set IMG=${IMGNAME}"
  IMG=${IMGNAME}
fi

## Prompt to confirm or redo creating disk image
echo -n "(C)reate disk image, (r)edo, (q)uit?"

while true; do
  read -sn1 INPUT

  case ${INPUT} in
    c|C|"") echo; break ;;
    r|R) return ;;
    q|Q) echo; exit ;;
  esac

done

## Create disk image or exit on failure
qemu-img create -f ${IMGFORMAT} "${IMG}" ${IMGSIZE} || exit 1

## Set success flag
IMGSTATUS=1
}

##
## Function to launch QEMU (takes arguments)
##
qemuLaunch () {
PS4=""
set -x
qemu-system-x86_64 \
"${@}" \
-name "${NAME}" \
-accel kvm -cpu host \
-smp ${CPU} \
-m ${MEM} \
${CHIPSET} \
${VIDEO} \
${CONSOLE} \
${NIC} \
${SOUND} \
${OPT} \
${ARG}
}

##
## Variables for version, command, config dir/file, and user provided arguments
##
VER="1.0.15"
CMD="$(basename ${0})"
CFGDIR="${HOME}/.config/${CMD}" 
CFG="${1}"
shift
ARG="${@}"

##
## Validate command line arguments
##
case ${CFG} in

  ## Show usage and exit if no arguments are provided or if first argument starts with a dash
  ""|-*)
  cat << USAGE
${CMD} ${VER}

Usage:
${CMD} <configfile> [-qemuopt1 -qemuopt2 -qemuopt3 ...]

USAGE

  # If files exist in config dir, then list them
  if [[ $(ls -A ${CFGDIR} 2>/dev/null) ]]; then
    echo "${CFGDIR}/"
    ls -1 ${CFGDIR}
  fi
  exit ;;

  ## Space is not allowed in config file name
  *" "*)
  echo "${CFG}: Invalid file name"
  exit 1 ;;

esac

##
## If slash is not detected in config file path, use predefined directory
##
if [[ ${CFG} != *"/"* ]]; then

  CFG="${CFGDIR}/${CFG}" 

  ## Create directory structure for config files if needed or exit on failure
  if [[ ! -d ${CFGDIR} ]]; then
    mkdir -p ${CFGDIR} || exit 1
  fi

fi

##
## Check if config file exists
##
if [[ -e ${CFG} ]]; then

  ## Exit if config file is not readable
  if [[ ! -r ${CFG} ]]; then
    echo "$(realpath ${CFG}): Unreadable configuration file"
    exit 1
  fi

  ## Exit if config file is not the correct type
  if [[ $(file -b ${CFG}) != "ASCII text" ]]; then
    echo "$(realpath ${CFG}): Invalid configuration file"
    exit 1
  fi

  ## Call function to read variables from config file instead of sourcing it
  setVarsFromConfig

else
  ## Prompt to create config file if not found
  echo "$(realpath ${CFG}): Configuration file not found"
  echo -n "(C)reate config or (q)uit?"

  while true; do
    read -sn1 INPUT

    case ${INPUT} in

      c|C|"")
      ## Call function to create config file
      createConfigFile

      ## Check function's exit code and exit on write failure to config file
      if [[ ${CFGSTATUS} != 0 ]]; then
        echo
        echo "Cannot write to $(realpath ${CFG})"
        exit 1
      fi

      ## Show config file contents and path, then exit
      echo
      cat ${CFG}
      echo
      echo "Saved in: $(realpath ${CFG})"
      echo "Edit this file and set IMG= and/or ISO="
      exit ;;

      ## Exit if user chose not to create config file
      q|Q) echo; exit ;;

    esac
  done
fi

## Show path to config file on startup
echo "Configuration file: $(realpath ${CFG})"

##
## Delay startup to allow to edit config
##
[[ ! ${DELAY} ]] && DELAY=5
[[ ${DELAY} == 0 ]] && echo -n "Launching..."

for (( n=${DELAY}; n>0; n-- )); do
  printf '\r%s' "Launching in ${n}... or (e)dit config?"

  ## read: N = *exactly* nchars vs n = nchars
  read -sN1 -t1 INPUT

  case ${INPUT} in
    e|E)
    echo
    ${EDITOR} ${CFG} 2>/dev/null || echo "EDITOR= must be set properly"
    exit ;;

    "") continue ;;

    ## Pressing any key breaks out of both loops (depth 2 nested loop)
    *) break 2 ;;
  esac

done
echo

##
## Prompt to continue if both ISO and disk image are not defined in config, and no CLI arguments are provided
##
if [[ ! ${ISO} && ! ${IMG} && ! ${ARG} ]]; then
  echo "Neither ISO= nor IMG= disk image set"
  echo -n "(E)dit config, (c)ontinue, (q)uit?"

  while true; do
    read -sn1 INPUT

    case ${INPUT} in

      e|E|"")
      echo
      ${EDITOR} ${CFG} 2>/dev/null || echo "EDITOR= must be set properly"
      exit ;;

      c|C) echo; break ;;

      q|Q) echo; exit ;;

    esac

  done
fi

##
## Check if disk image is defined in config and exists
##
if [[ ${IMG} && ! -e ${IMG} ]]; then

  ## Prompt to create disk image
  echo "IMG=${IMG}: Inaccessible or not found"
  echo -n "(P)repare disk image, (e)dit config, (c)ontinue, (q)uit?"

  while true; do
    read -sn1 INPUT

    case ${INPUT} in

      p|P|"")
      ## Call function to create disk image until success flag is set
      until [[ ${IMGSTATUS} ]]; do echo; createDiskImage; done
      ## Break out of the prompt loop after success
      break ;;

      e|E)
      echo
      ${EDITOR} ${CFG} 2>/dev/null || echo "EDITOR= must be set properly"
      exit ;;

      ## Continue if user chose not to create disk image
      c|C) IMG=""; echo; break ;;

      ## Exit if user chose to quit
      q|Q) echo; exit ;;

    esac
  done
fi

##
## Check if RAW disk image format is set
##
if [[ ${IMG} ]]; then

  case ${RAW} in
    1|y|Y|[yY][eE][sS]|[oO][nN]|[tT][rR][uU][eE]) DISK="-drive format=raw,file=" ;;
    *) DISK="-hda " ;;
  esac

fi

##
## Check if ISO is defined in config and exists
##
if [[ ${ISO} ]]; then

  if [[ ! -e ${ISO} ]]; then
    echo "ISO=${ISO}: Inaccessible or not found"
    ISO=""

    ## Prompt to continue if no valid ISO and no disk image are defined in config
    if [[ ! ${IMG} ]]; then
      echo -n "(E)dit config, (c)ontinue, (q)uit?"

      while true; do
        read -sn1 INPUT

        case ${INPUT} in

          e|E|"")
          echo
          ${EDITOR} ${CFG} 2>/dev/null || echo "EDITOR= must be set properly"
          exit ;;

          c|C) echo; break ;;

          q|Q) echo; exit ;;

        esac

      done
    fi

  ## Boot from ISO but only once on startup if bootable disk image is attached
  else CDROM="-boot once=d -cdrom "

  fi
fi

##
## Network (default: enabled)
##
case ${MAC} in [rR][aA][nN][dD][oO][mM])
  MAC=$( printf 52:54:%02x:%02x:%02x:%02x $(( ${RANDOM} & 0xff )) $(( ${RANDOM} & 0xff )) $(( ${RANDOM} & 0xff)) $(( ${RANDOM} & 0xff )) ) ;;
esac

case ${NET} in

  ## NET=no
  0|n|N|[nN][oO]|[oO][fF][fF]|[fF][aA][lL][sS][eE]) NIC="-nic none" ;;

  ## NET=bridge
  br[0-9]|bridge[0-9]|virbr[0-9])
  NIC="-nic bridge,br=${NET}"
  [[ ${MAC} ]] && NIC="${NIC},mac=${MAC}"
  ;;

  ## NET=yes|foo
  *)

  ## Check if MAC is defined in config
  if [[ ${MAC} ]]; then
    NIC="-nic mac=${MAC}"
    ## Append NIC options if SSH is defined in config
    [[ ${SSH} ]] && NIC="${NIC},"

  ## MAC is not set, use single NIC opton if SSH is defined in config
  else
    [[ ${SSH} ]] && NIC="-nic "
  fi

  ## Set NIC option(s) for SSH forwarding from host to guest
  [[ ${SSH} ]] && NIC="${NIC}hostfwd=tcp::${SSH}-:22"
  ;;

esac

##
## Audio (default: disabled)
##
case ${AUDIO} in 1|y|Y|[yY][eE][sS]|[oO][nN]|[tT][rR][uU][eE])
  SOUND="-device intel-hda -device hda-duplex" ;;
esac

##
## Chipset: i440FX+PIIX3 PCI/ISA (default) or Q35+ICH9 PCI-E/AHCI
##
case ${ICH9} in 1|y|Y|[yY][eE][sS]|[oO][nN]|[tT][rR][uU][eE])
  CHIPSET="-machine q35" ;;
esac

##
## Video output and console monitor
##
[[ ${VNC} ]] && VIDEO="-vnc ${VNC},lossy=on,power-control=on"
[[ ${TELNET} ]] && CONSOLE="-monitor telnet:127.0.0.1:${TELNET},server=on,wait=off"

##
## Check config for missing settings and set defaults if needed
##
[[ ! ${NAME} ]] && NAME="$(basename ${CFG})"
[[ ! ${CPU} ]] && CPU=1
[[ ! ${MEM} ]] && MEM=2G

##
## Show some relevant VM information on startup
##
echo
echo                   "VM name     [${NAME}]"
[[ ${CDROM} ]] && echo "boot from   [$(basename "${ISO}")]"
[[ ${IMG} ]] && echo   "disk image  [$(basename "${IMG}")]"
[[ ${SOUND} ]] && echo "audio       [enabled]"

## Only show MAC address if defined in config and if network is enabled
if [[ ${NIC} == "-nic none" ]]; then echo "network     [disabled]"
else
  [[ ${NIC} == "-nic bridge"* ]] && echo  "network     [bridge]"
  [[ ${MAC} ]] && echo                    "MAC address [${MAC}]"
fi

[[ ${TELNET} ]] && echo "TELNET      [:${TELNET}]"
[[ ${VNC} ]] && echo    "VNC         [${VNC}]"

##
## Finally launch QEMU
##
echo

## If disk image file names contain spaces, pass them properly to QEMU
if [[ ${IMG} == *" "* && ${ISO} == *" "* ]]; then
  qemuLaunch ${DISK}"${IMG}" ${CDROM}"${ISO}"
elif [[ ${IMG} == *" "* ]]; then
  qemuLaunch ${DISK}"${IMG}" ${CDROM}${ISO}
elif [[ ${ISO} == *" "* ]]; then
  qemuLaunch ${DISK}${IMG} ${CDROM}"${ISO}"
else
  qemuLaunch ${DISK}${IMG} ${CDROM}${ISO}
fi

##
